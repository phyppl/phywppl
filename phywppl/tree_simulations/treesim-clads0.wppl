/**
 * Simulation from startTime to the present under ClaDS0, returns observed Tree (without extinctions)
 *
 *
 *
 * To run the simulation use:
 * npm run wppl tree_simulations/treesim-clads0.wppl [N] [OUTPUT_FILENAME] [TREEAGE] [LAMBDA0]
 *
 * where [N] is the number of iterations, for example 3
 *       [OUTPUT_FILENAME] path to output file
 *       [startTime] Tree age
 *       [LAMBDA0] value of lambda at the start of the simulation
 *
 */

var filename = argv["_"][1]
var startTime = argv["_"][2]
var lambda0 = argv["_"][3]
var alpha = Math.log(0.95)
var sigma = 0.1
var multip = 1
var rho = 1
// GUARD
var MAX_LAMBDA = 20


var clads0TreeSimulate= function( startTime, lambda, alpha, sigma, rho, multip  )
{
    var Tree = clads0TreeSim( startTime, lambda, alpha, sigma, rho, multip );
    if (Tree == false) {
        return("No survivors")
    }
    var infiniteTree = Tree.includes("Infinity:")
    if (infiniteTree == true) {
        return("Error: Tree has infinite parts - the maximum guard on lambda was activated")
    }
    var zeroTree = Tree.includes("Zero:")
    if (zeroTree == true) {
        return("Error: Tree has parts where the minimum guard on lambda was activated")
    }
    else {
        var Tree = Tree.join('') + ';' ;
        fs.write(filename, Tree);
        return Tree
    }
}

 
 var clads0TreeSim = function( startTime, lambda, alpha, sigma, rho, multip )
{
    // extreme values patch
    if ( lambda  > phyjs.MAX_LAMBDA ) {
        var Label = 'Infinity:';            //Indicate infinite tree on this branch
        var NewickTree = [Label , startTime] ;     // Make start on tree
        return NewickTree;
        }
    if ( lambda == 0.0 ) {
        var Label = 'Zero:';            //Indicate lambda=0 on this branch
        var NewickTree = [Label , startTime] ;     // Make start on tree
        return NewickTree;
    }
    // end extreme values patch

    var t = exponential( {a: lambda } )
    var currentTime = startTime - t
    var internalBranch = startTime - currentTime;    // Calculate length of internal branch leading up to event
    if ( currentTime < 0 )     // If we have reached the present...
    {
        if ( flip( rho ) ){
            var Label = uniform(0,1) + ':';            //Survived to present, sampled. Start tree: Set random label to leaf node
            var NewickTree = [Label , startTime] ;     // Make start on tree
            return NewickTree;
        }
        else {
            return false;    //Survived to present, but not sampled. Remove branch.
        }
    }
    else {

    // Speciation; first draw values for daughter lineages and then recurse
        var multip1 = multip * Math.exp(gaussian( {mu: alpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter1
        var multip2 = multip * Math.exp(gaussian( {mu: alpha, sigma: sigma}))  // Draw and calc new multiplier set for daughter2
        var lambda1 = lambda * multip1                                // Calculate new lambda for daughter1
        var lambda2 = lambda * multip2                                // Calculate new lambda for daughter2
        
        var leftTree  = clads0TreeSim( currentTime, lambda1, alpha, sigma, rho, multip1 );       // Get back two Newick strings, partial trees
        var rightTree = clads0TreeSim( currentTime, lambda2, alpha, sigma, rho, multip2 );      // Get back two Newick strings, partial trees
        
        if (leftTree == false && rightTree == false ) {             // Both sides are extinct/not sampled
                return false;
            }
        if (rightTree == false) {
                var newBranch = leftTree[1] + internalBranch;       // Add the two branches
                var NewickTree = [leftTree[0] , newBranch ] ;       // build correct tree without the extinct side
                return NewickTree ;
            }
        if (leftTree  == false ) {
                var newBranch = rightTree[1] + internalBranch;      // Add the two branches
                var NewickTree = [rightTree[0] , newBranch ] ;      // build correct tree without the extinct side
                return NewickTree ;
            }
        else {
                var NewickTree = ['(' + leftTree.join('') +',' + rightTree.join('') + ')' + ':' , internalBranch] ;          // Merge trees
                return NewickTree ;
            }
    }
    
}


clads0TreeSimulate( startTime, lambda0, alpha, sigma, rho, multip )
